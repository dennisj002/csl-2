5
// Intel notes - cf. InstructionSet-A-M-253666.pdf - section 2.1; InstructionSet-N-Z-253667.pdf section B.1/B.2 :
// Intel instructions (insn) can only operate on one memory operand per instruction, i.e. one cannot move mem to mem in one insn, you must move mem to reg and reg to mem
// the direction is either mem to reg or reg to mem determined in some instructions by a direction bit in the opCode
// b prefix = binary code
// -----------------------------------------------------------------------
// instuction format ( in bytes )
// prefixes  opcode  modRm     sib     disp   immediate
//  0 - 4    1 - 3   0 - 1    0 - 1    0,1,4    0,1,2,4      -- number of bytes
// optional          ------------optional--------------
//   REX Prefix 
//   0x40 = 0100 + WRSB  W = 64 bit operand flag, R = reg ext. flag bit, S = sib ext, B = r/m reg ext flag bit
// -----------------------------------------------------------------------
//   modRm byte ( bits ) :: mod 0 : no disp ;; mod 1 : 1 byte disp : mod 2 : 4 byte disp ;; mod 3 : reg value :: sections 2.1.3/2.1.5, Table 2-2
//   the mod field is a semantic function on the r/m field determining its meaning either as the reg value itself or the value at the [reg] as an addr + offset
//   Intel InstructionSet-N-Z-253667.pdf section 2.1.5
//    mod     reg     r/m  
//   7 - 6   5 - 3   2 - 0 
//    0-3              4 - b100 => sib, instead of reg ESP   : mod bit determines size of displacement 
// bit fields :
//  mod reg r/m 
//   00 000 000
// *if insn has a mod/rm byte then ::
// #define RM( insnAddr )  (*( (byte*) insnAddr + 1) & 7 )   // binary : 00000111
// #define REG( insnAddr ) (*( (byte*) insnAddr + 1) & 56 )  // binary : 00111000 
// #define MOD( insnAddr ) (*( (byte*) insnAddr + 1) & 192 ) // binary : 11000000 
// -----------------------------------------------------------------------
//  reg/rm codes :
//  EAX 0, ECX 1, EDX 2, EBX 3, ESP 4, EBP 5, ESI 6, EDI 7
// -----------------------------------------------------------------------
//  bit positions encoding :  ...|7|6|5|4|3|2|1|0|  but nb. intel is little endian
// -----------------------------------------------------------------------
//  opCode direction bit 'd' is bit position 1 : 1 => rm/sib to reg ; 0 => reg to rm/sib -- for some instructions
//  sign extend bit 's' is bit position 1 for some instructions
//  operand size bit 'w' is bit position 0 for some instructions
// -----------------------------------------------------------------------
//       sib byte ( bits ) with rm 4 - b100 - ESP
//    scale  index   base
//    7 - 6  5 - 3  2 - 0
//    scale 0 : [index * 1 + base]
//    scale 1 : [index * 2 + base]
//    scale 2 : [index * 4 + base]
//    scale 1 : [index * 4 + base]
// -----------------------------------------------------------------------
// intel syntax : opcode dst, src
// att syntax   : opcode src, dst

// note : x86-32 instruction format : || prefixes : 0-4 bytes | opCode : 1-3 bytes | mod : 0 - 1 byte | sib : 0 - 1 byte | disp : 0-4 bytes | immediate : 0-4 bytes ||
// note : intex syntax  : instruction dst, src - csl uses this order convention
//        att   syntax  : instruction src, dst
// note : rm : reg memory - the register which contains the memory address in mod instructions

// csl uses intel syntax convention

// ----------------------------------
// | intel addressing ideas summary |
// ----------------------------------
// remember : the intel cpus can not reference two memory operands in one instruction so
// the modr/m byte selects with the mod and rm field an operand to use with the reg field value (generally)
// the mod field ( 2 bits ) contols whether the r/m field reg refers to a direct reg or indirect + disp values (disp values are in the displacement field)
// mod 0 is for register indirect -- no displacement the register is interpreted as an address; it refers to a value in a memory address with no disp
// mod 1 is for register indirect -- 8 bit disp the register is interpreted as an address; it refers to a value in a memory address with 8 bit disp
// mod 2 is for register indirect -- 32 bit disp the register is interpreted as an address; it refers to a value in a memory address with 32 bit disp
// mod 3 is for register direct   -- using the direct register value -- not as an address 
// the reg field of the modr/m byte generally refers to to register to use with the mod modified r/m field -- intel can't address two memory fields in any instruction
// --------------------------------------

// controlFlags : bits ::  4      3       2     1      0         
//                       rex    imm    disp   sib    modRm      
//                      rex=16 imm=8, disp=4 sib=2  mod/Rm=1
//                      REX_B  IMM_B  DISP_B SIB_B   MODRM_B

// csl uses intel syntax convention
//logOn

C_Off
#if 0 // debug
C 
Root
: sp stack pause ; sp
User
: sp stack pause ; sp
#else
C 
: sp ; //stack pause ; sp
User
: sp ; //stack pause ; sp
#endif 
sp
Compiler Compiling C Asm
: asmBegin compileModeOn asmModeOn sourceCodeInit sourceCodeOn token wordNew begin ' {| find compileWord ; immediate  // nb : asm mode is interpreted
: asmEnd ' {| find compileWord semi asmModeOff ; immediate
'asm: 'asmBegin find alias
';asm 'asmEnd find alias 
//' :asm find winfo //sp
//' asm; find winfo //sp
: ;; ' ; find compileWord ' _prefix find compileWord ; immediate
// C : ;; ' ;; find compileWord ; immediate
//' ;; find wdiss // sp
'X64 namespace
"namespaces/compiler/asmConstants.csl" include

hex
Logic Combinators Bits C X64 
'x64_dbg var
'DBI var //1 const
: dbiOn DBI 1  = ;
: dbiOff DBI 0 = ;
x64_dbg 1 =
#if x64_dbg    
dscOn 
//postifx verbosity 3 =
#endif    
//scOn
//: abs( n | rtn ) { n > 0 } { rtn n = } { rtn 0 n - = } ifElse return rtn ; 
'fa 'findAlias find alias
'_Compile_Int8 'compileByte fa
'_Compile_Int16 'compileInt16 fa
'_Compile_Int32 'compileInt32 fa
'_Compile_Int64 'compileInt64 fa
//logOn
c_syntaxOn
//vb3 () ;

int64 
abs ( int64 n ) 
{
    if ( n < 0 ) n = 0 - n ;
    return n ; 
}

uint8
Calculate_Rex ( uint8 reg, uint8 rm, uint8 rex_w_flag, uint8 rex_b_flag )
{
    uint8 rex = ( ( rex_w_flag ? 8 : 0 ) | ( ( reg > 7 ) ? 4 : 0 ) | ( ( rm > 7 ) ? 1 : 0 ) ) ;
    if ( rex || rex_b_flag || rex_w_flag ) rex |= 0x40 ;
    return rex ;
} prefix

uint8
CalculateModRegardingDisplacement ( uint8 mod, int64 disp )
{
    // bits :
    //  mod reg r/m 
    //   00 000 000    
    if ( mod != REG )
    {
        if ( disp == 0 )
            mod = 0 ;
        else if ( disp <= 0x7f ) mod = 1 ; // displacement can be either plus or minus 0x7f ( 127 )
        else mod = 2 ;
    }
    return mod ;
} prefix

uint64
CalculateSib ( int64 scale, int64 indexReg, int64 baseReg )
{
    //  scale index base bits  : scale 1 = *2, 2 = *4, 3 = *8 ; index and base refer to registers
    //  00    000   000
    //if (( indexReg > 0x7 ) || ( baseReg > 0x7 ) ) Exception ( MACHINE_CODE_ERROR, ABORT ) ;
    uint64 sib = ( scale << 6 ) | ( ( indexReg Bits.& 0x7 ) << 3 ) | ( baseReg Bits.& 0x7 ) ;
    return sib ;
} prefix

uint64
_CalculateRex ( uint8 reg, uint8 rm, uint8 sib, int64 operandSize )
{
    //  0100    WRXB
    uint64 rex = 0 ;
    if ( operandSize > INT32_SIZE )
    {
        //rex += 8 ; // 1 << 3 ;
        byte rex = 0x48 ;
        if ( reg > 0x7 ) rex += 4 ; // (1 << 2) ;
        if ( sib > 0x7 ) rex += 2 ; // 1 << 1 ; // needs to be fixed!! respecting sib first
        if ( rm > 0x7 ) rex += 1 ;
    }
    return rex ;
} prefix
// instruction letter codes : I - immediate data ; 32 : 32 bit , 8 : 8 bit ; EAX, DSP : registers
// we could have a mod of 0 so the modRmImmDispFlag is necessary
// operandSize : specific size of immediate data - BYTE or WORD
// SIB : scale, index, base addressing byte
void
_Compile_ImmDispData ( int64 immDisp, uint8 size, uint8 forceFlag )
{
    // the opcode probably is all that needs to be adjusted for this to not be necessary    
    // to not compile an imm when imm is a parameter, set isize == 0 and imm == 0
    if ( size > 0 )
    {
        if ( size == BYTE )
            _Compile_Int8 ( ( byte ) immDisp ) ;
        else if ( size == 2 )
            _Compile_Int16 ( immDisp ) ;
        else if ( size == 4 )
            _Compile_Int32 ( immDisp ) ;
        else if ( size == CELL )
            _Compile_Int64 ( immDisp ) ;
    }
    else // with operandSize == 0 let the compiler use the minimal size ; nb. can't be imm == 0
    {
        if ( abs ( immDisp ) >= 0x7fffffff )
            _Compile_Int64 ( immDisp ) ;
        else if ( abs ( immDisp ) >= 0x7f )
            _Compile_Int32 ( immDisp ) ;
        else if ( immDisp || forceFlag )
            _Compile_Int8 ( ( byte ) immDisp ) ;
    }
} prefix

uint8
CalculateModRmByte ( uint8 mod, uint8 reg, uint8 rm, uint8 sib, int64 disp )
{
    uint8 modRm ;
    mod = CalculateModRegardingDisplacement ( mod, disp ) ;
    if ( ( mod < 3 ) && ( rm == 4 ) ) //|| ( ( rm == 5 ) && ( disp == 0 ) ) ) )
        //if ( ( mod < 3 ) && ( ( ( rm == 4 ) && ( sib == 0 ) ) || ( ( rm == 5 ) && ( disp == 0 ) ) ) )
    {
        // cf. InstructionSet-A-M-253666.pdf Table 2-2
        ps ( "\n\nCalculateModRmByte : MACHINE_CODE_ERROR\n" ) ;
        ps ( "\n cf. InstructionSet-A-M-253666.pdf Table 2-2\n\n" ) ;
        pause ;
        //CSL_Exception ( MACHINE_CODE_ERROR, 0, 1 ) ;
        quit ;
    }
    if ( sib )
    {
        rm = 4 ; // from intel mod tables
        reg = 0 ;
    }
    modRm = ( mod << 6 ) + ( ( reg Bits.& 0x7 ) << 3 ) + ( rm Bits.& 0x7 ) ; // mod is 2 bits ; only use 3 bits of reg, 3 bits of rm
    return modRm ;
} prefix

void
_Compile_Write_Instruction_X64 ( uint8 rex, uint8 opCode0, uint8 opCode1, uint8 modRm, int16 controlFlags, uint8 sib, int64 disp, uint8 dispSize, int64 imm, uint8 immSize )
{
#if DBI
    int nbytes, _here  ;
    _here = Here ;
#endif
    //<dbg>
    if ( rex ) _Compile_Int8 ( rex ) ;
    if ( opCode0 ) _Compile_Int8 ( ( byte ) opCode0 ) ;
    if ( opCode1 ) _Compile_Int8 ( ( byte ) opCode1 ) ;
    if ( ( controlFlags Bits.& MODRM_B ) ) _Compile_Int8 ( modRm ) ;
    if ( sib && ( controlFlags Bits.& SIB_B ) ) _Compile_Int8 ( sib ) ;
    if ( disp || ( controlFlags Bits.& DISP_B ) ) _Compile_ImmDispData ( disp, dispSize, 0 ) ;
    if ( imm || ( controlFlags Bits.& IMM_B ) ) _Compile_ImmDispData ( imm, immSize, ( controlFlags Bits.& IMM_B ) ) ;
#if DBI
    nbytes = Here - _here ; 
    nl ; location () ;
    printf ( "\n_Compile_Write_Instruction_X64 : %lx : %d bytes : ...", _here, nbytes ) ; 
    dis ( _here, nbytes ) ; nl ; //pause () ; nl ; nl ; 
#endif
} prefix
pwi _Compile_Write_Instruction_X64 //pause
#if 0
Boolean
RegParameterOrder ( uint8 n )
{
    Boolean regOrder [] = { RDI, RSI, RDX, RCX, R8, R9 } ;
    return regOrder [n] ;
}
#endif
// some checks of the internal consistency of the instruction bits

// Intel - InstructionSet-A-M-253666.pdf - section 2.1 :
//-----------------------------------------------------------------------
// instuction format ( number of bytes )
// prefixes  opcode  modRm   sib       disp    immediate
//  0 - 4    1 - 3   0 - 1  0 - 1    0,1,2,4    0,1,2,4      -- number of bytes
//-----------------------------------------------------------------------
//   modRm byte ( bits )  mod 0 : no disp ; mod 1 : 1 byte disp : mod 2 : 4 byte disp ; mod 3 : just reg value
//    mod     reg      rm
//   7 - 6   5 - 3   2 - 0 
//-----------------------------------------------------------------------
//  reg/rm values :
//  EAX 0, ECX 1, EDX 2, ECX 3, ESP 4, EBP 5, ESI 6, EDI 7
//-----------------------------------------------------------------------
//       sib byte ( bits )
//    scale  index   base
//    7 - 6  5 - 3  2 - 0
//-----------------------------------------------------------------------

//-----------------------------------------------------------------------
//   modRm byte ( bits )  mod 0 : no disp ; mod 1 : 1 byte disp : mod 2 : 4 byte disp ; mod 3 : just reg value
//    mod     reg      rm
//   7 - 6   5 - 3   2 - 0
//-----------------------------------------------------------------------
//  reg/rm values :
//  EAX 0, ECX 1, EDX 2, ECX 3, ESP 4, EBP 5, ESI 6, EDI 7
//-----------------------------------------------------------------------

void
Compile_CalculateWrite_Instruction_X64 ( uint8 opCode0, uint8 opCode1, uint8 mod, uint8 reg, uint8 rm, uint16 controlFlags, uint8 sib, uint64 disp, uint8 dispSize, uint64 imm, uint8 immSize )
{
    uint8 rex = Calculate_Rex ( reg, rm, ( immSize == 8 ) || ( controlFlags Bits.& REX_W ), ( controlFlags Bits.& REX_B ) ) ;
    uint8 modRm = CalculateModRmByte ( mod, reg, rm, sib, disp ) ;
    _Compile_Write_Instruction_X64 ( rex, opCode0, opCode1, modRm, controlFlags, sib, disp, dispSize, imm, immSize ) ;
} prefix
pwi Compile_CalculateWrite_Instruction_X64 //pause
// intel syntax : opcode dst, src
// mov reg to mem or mem to reg
// note the order of the operands match intel syntax with dst always before src

// the basic move instruction
// mov reg to mem or mem to reg ( but not reg to reg or move immediate )
// note this function uses the bit order of operands in the mod byte : (mod) reg r/m
// not the intel syntax as with _CompileMoveRegToMem _CompileMoveMemToReg
// the 'rmReg' parameter must always refer to a memory location; 'reg' refers to the register, either to or from which we move mem

// controlFlags : bits ::  3       2     1      0         D D - - I D S M
//                       imm    disp   sib    modRm      mod               (mod) only in move insn
//                     imm=8, disp=4 sib=2  mod/Rm=1

// size refers to size of the operand or immediate
// mod :: TO_REG == 3 : TO_MEM == 0,1,2 depending on disp size ; 0 == no disp ; 1 == 8 bit disp ; 2 == 32 bit disp

void
Compile_Move ( uint8 direction, uint8 mod, uint8 reg, uint8 rm, uint8 operandSize, uint8 sib, int64 disp, uint8 dispSize, int64 imm, uint8 immSize )
{
    uint8 opCode0 = 0, opCode, modRm ;
    uint16 controlFlags = ( disp ? DISP_B : 0 ) | ( sib ? SIB_B : 0 ) ;
    if ( ! operandSize ) operandSize = 8 ;
    if ( imm || immSize )
    {
        reg = 0 ; // the rm is the destination and this is move immediate
        controlFlags |= IMM_B ;
        if ( immSize < 8 )
        {
            if ( immSize == 1 ) opCode = 0xb0 + rm ;
            else if ( immSize == 2 )
            {
                opCode0 = 0x66 ;
                opCode = 0xb8 | rm ;
                modRm = 0 ;
            }
            else if ( immSize == 4 )
            {
                opCode = 0xb8 | rm ;
                modRm = 0 ;
            }
        }
        else //if ( immSize >= 8 ) 
        {
            //DBI_ON ;
            //if ( abs (imm) <= 2147483647 ) // sign extend 32 bit to 64 bit -> smaller faster insn
            if ( imm <= 2147483647 ) // sign extend 32 bit to 64 bit -> smaller faster insn
            {
                opCode = 0xc7 ;
                reg = 0 ;
                immSize = 4 ;
                controlFlags |= ( MODRM_B ) ;
            }
            else
            {
                opCode = 0xb8 ;
                opCode += ( rm Bits.& 7 ) ;
            }
            controlFlags |= ( REX_W ) ;
        }
        //DBI_ON ; 
        // zero out destination
        //Compile_CalculateWrite_Instruction_X64 ( 0, 0xb8 + (rm Bits.& 7), mod, reg, rm, controlFlags, sib, disp, dispSize, 0, CELL ) ;
    }
    else // non immediate
    {
        controlFlags |= ( MODRM_B ) ;
        opCode = 0x88 ;
        if ( operandSize > 1 ) opCode += 1 ; //nb. if using rex then we cannot use AH, BH, CH, DH per Intel instruction manual
        if ( direction == TO_REG ) opCode |= 2 ; // 0x8b ; // 0x89 |= 2 ; // d : direction bit = 'bit 1' : 0 == dest is mem ; 1 == dest is reg
        if ( operandSize == 2 ) opCode0 = 0x66 ; // choose 16 bit operand
        if ( operandSize >= 8 ) controlFlags |= ( REX_W ) ;
        if ( ! mod )
        {
            if ( disp == 0 ) mod = 0 ;
            else if ( abs (disp) <= 0x7f ) mod = 1 ;
            else if ( abs (disp) >= 0x100 ) mod = 2 ;
        }
    }
    Compile_CalculateWrite_Instruction_X64 ( opCode0, opCode, mod, reg, rm, controlFlags, sib, disp, dispSize, imm, immSize ) ;
    //DBI_OFF ;
} prefix
pwi Compile_Move //pause

void
Compile_Move_WithSib ( uint8 direction, uint8 mod, uint8 reg, uint8 rm, uint8 scale, uint8 index, uint8 base )
{
    Compile_Move ( direction, mod, reg, rm, 8, CalculateSib ( scale, index, base ), 0, 0, 0, 0 ) ;
} prefix

void
Compile_Move_Reg_To_Rm ( uint8 rm, uint8 reg, int64 disp, byte size )
{
    Compile_Move ( MEM, 0, reg, rm, size, 0, disp, 0, 0, 0 ) ;
} prefix

// intel syntax : opcode dst, src
// mov reg to mem or mem to reg
// note the order of the operands match intel syntax with dst always before src

void
Compile_Move_Rm_To_Reg ( uint8 rm, uint8 reg, int64 disp, byte size )
{
    Compile_Move ( REG, 0, rm, reg, size, 0, disp, 0, 0, 0 ) ;
} prefix
// intel syntax : opcode dst, src
// mov reg to mem or mem to reg
// note the order of the operands match intel syntax with dst always before src

void
Compile_Move_Reg_To_Reg ( uint8 dstReg, int64 srcReg, byte size )
{
    if ( dstReg != srcReg ) Compile_Move ( REG, REG, dstReg, srcReg, size, 0, 0, 0, 0, 0 ) ; //size ) ; // nb! mod == REG in move reg to reg
} prefix

void
Compile_MoveImm ( uint8 mod, uint8 rm, int64 disp, int64 imm, uint8 immSize )
{
    if ( ! immSize ) immSize = 8 ;
    if ( ( mod == MEM ) && ( ( immSize >= 8 ) || ( imm > 0xffffffff ) ) )
    {
        // there is no x64 instruction to move imm64 to mem directly
        //uint8 thruReg = THRU_REG ;
        //Compile_MoveImm_To_Reg ( thruReg, imm, immSize ) ; // thruReg : R8D : needs to be a parameter
        //Compile_MoveImm ( REG, rm, 0, imm, immSize ) ;
        Compile_Move ( 0, REG, 0, rm, 0, 0, 0, 0, imm, immSize ) ;
        Compile_Move_Reg_To_Rm ( rm, THRU_REG, disp, immSize ) ;
    }
    else Compile_Move ( 0, mod, 0, rm, 0, 0, 0, 0, imm, immSize ) ; // nb. reg == 0 in a move immediate
} prefix
pwi Compile_MoveImm //pause

void
Compile_MoveImm_To_Reg ( uint8 rm, int64 imm, uint8 immSize )
{
    Compile_MoveImm ( REG, rm, 0, imm, immSize ) ;
} prefix

void
Compile_MoveImm_To_Mem ( uint8 rm, int64 imm, uint8 immSize )
{
    Compile_MoveImm ( MEM, rm, 0, imm, immSize ) ;
} prefix

void
Compile_MoveMemValue_To_Reg ( uint8 reg, byte * address, uint8 iSize )
{
    Compile_MoveImm_To_Reg ( reg, ( int64 ) address, iSize ) ;
    Compile_Move_Rm_To_Reg ( reg, reg, 0, iSize ) ;
} prefix

void
Compile_MoveMemValue_ToReg_ThruReg ( uint8 reg, byte * address, uint8 iSize, uint8 thruReg )
{
    Compile_MoveImm_To_Reg ( thruReg, ( int64 ) address, iSize ) ;
    Compile_Move_Rm_To_Reg ( reg, thruReg, 0, iSize ) ;
} prefix

void
Compile_MoveReg_ToAddress_ThruReg ( uint8 reg, byte * address, uint8 thruReg )
{
    Compile_MoveImm_To_Reg ( thruReg, ( int64 ) address, CELL_SIZE ) ;
    Compile_Move_Reg_To_Rm ( thruReg, reg, 0, 0 ) ;
} prefix

// set the value at address to reg - value in reg

void
_Compile_Move_Literal_Immediate_To_Reg ( int64 reg, int64 value, int size )
{
    Compile_MoveImm_To_Reg ( reg, value, size ) ;
} prefix

void
_Compile_SetAtAddress_WithReg ( int64 * address, int64 reg, int64 thruReg )
{
    _Compile_Move_Literal_Immediate_To_Reg ( thruReg, ( int64 ) address, 0 ) ;
    Compile_Move_Reg_To_Rm ( thruReg, reg, 0, 0 ) ;
} prefix

// opCode group 1 - 0x80-0x83 : ADD OR ADC SBB AND SUB XOR CMP : but not with immediate data
// s and w bits of the x86 opCode : w seems to refer to word and is still used probably for historic and traditional reasons
// note : the opReg - operand register parameter is always used for the rm field of the resulting machine code
// These are all operating on a memory operand
// for use of immediate data with this group use _Compile_Group1_Immediate

void
_Compile_X_Group1 ( uint8 code, uint8 toRegOrMem, uint8 mod, uint8 reg, uint8 rm, uint8 sib, int64 disp, uint8 operandSize )
{
    int64 opCode = code << 3, controlFlags = DISP_B | MODRM_B ;
    if ( operandSize > BYTE ) opCode |= 1 ;
    if ( toRegOrMem == TO_REG ) opCode |= 2 ;
    // we need to be able to set the size so we can know how big the instruction will be in eg. CompileVariable
    // otherwise it could be optimally deduced but let caller control by keeping operandSize parameter
    // some times we need cell_t where bytes would work
    //Compiler_WordStack_SCHCPUSCA ( 0, 1 ) ;
    //Compile_CalculateWrite_Instruction_X64 ( 0, opCode, mod, reg, rm, DISP_B | REX_W | MODRM_B, sib, disp, 0, 0, osize ) ;
    if ( operandSize < 8 )
    {
        int64 opCode0 ;
        if ( operandSize == 1 ) opCode |= rm ;
        else if ( operandSize == 2 )
        {
            opCode0 = 0x66 ;
            opCode |= rm ;
            //modRm = 0 ;
        }
        else if ( operandSize == 4 )
        {
            opCode |= rm ;
            //modRm = 0 ;
        }
        Compile_CalculateWrite_Instruction_X64 ( opCode0, opCode, mod, reg, rm, controlFlags, sib, disp, 0, 0, operandSize ) ;
    }
    else //if ( osize == 8 ) 
    {
        Compile_CalculateWrite_Instruction_X64 ( 0, opCode, mod, reg, rm, controlFlags, sib, disp, 0, 0, operandSize ) ;
    }
} prefix

// opCode group 1 - 0x80-0x83 : ADD OR ADC SBB AND_OPCODE SUB XOR CMP : with immediate data
// this is for immediate operands operating on REG direction
// mod := REG | MEM
// rm is operand register
// ?!? shouldn't we just combine this with _Compile_Group1 (above) ?!?

void
_Compile_X_Group1_Reg_To_Reg ( uint8 code, uint8 dstReg, int64 srcReg )
{
    _Compile_X_Group1 ( code, TO_REG, REG, srcReg, dstReg, 0, 0, CELL ) ;
} prefix

// opCode group 1 - 0x80-0x83 : ADD OR ADC SBB AND_OPCODE SUB XOR CMP
// to reg ( toRm == 0 ) is default
// toRm flag is like a mod field but is coded as part of opCode
// toRm flag = 0 => ( dst is reg, src is rm ) is default - reg  - like mod 3
// toRm flag = 1 => ( dst is rm, src is reg )             [reg] - like mod 0 // check this ??


// X variable op compile for group 1 opCodes : +/-/cmp/and/or/xor - ia32 

// subtract second operand from first and store result in first

void
_Compile_X_Group1_Immediate ( uint8 code, uint8 mod, uint8 rm, int64 disp, uint64 imm, uint8 iSize )
{
    // 0x80 is the base opCode for this group of instructions but 0x80 is an alias for 0x82
    // we always sign extend so opCodes 0x80 and 0x82 are not being used
    // 1000 00sw 
    int64 opCode = 0x80 ;
    if ( ( ( iSize > 4 ) || ( imm >= 0x100000000 ) ) ) //&& disp )
    {
        //_DBI_ON ;
        // x64 has no insn to do a group1_op with imm int64 to mem directly so ...
        // first move to a reg then from that reg group1Op to mem location
        if ( rm != DSP ) //! disp )
        {
            Compile_MoveImm_To_Reg ( THRU_REG, imm, iSize ) ;
            //_Compile_X_Group1_Reg_To_Reg ( code, ACC, OREG ) ;
            _Compile_X_Group1_Reg_To_Reg ( code, rm, THRU_REG ) ;
        }
        else
        {
            Compile_MoveImm_To_Reg ( ACC, imm, iSize ) ;
            _Compile_X_Group1 ( code, REG, MEM, ACC, rm, 0, disp, CELL ) ;
        }
        //DBI_OFF ;
        return ;
    }
    else if ( ( iSize > BYTE ) || (abs ( imm ) >= 0x7f ) ) //( imm >= 0x100 ) )
    {
        opCode |= 1 ;
    }
    else if ( ( iSize <= BYTE ) || (abs ( imm ) < 0x100 ) ) //( imm < 0x100 ) ) 
        opCode |= 3 ;
    // we need to be able to set the size so we can know how big the instruction will be in eg. CompileVariable
    // otherwise it could be optimally deduced but let caller control by keeping operandSize parameter
    // some times we need cell_t where bytes would work
    //_Compile_InstructionX86 ( int8 opCode, int8 mod, int8 reg, int8 rm, int8 controlFlags, int8 sib, int64 disp, int8 dispSize, int64 imm, int8 immSize )
    //DBI_ON ;
    Compile_CalculateWrite_Instruction_X64 ( 0, opCode, mod, code, rm, REX_W | MODRM_B | IMM_B | DISP_B, 0, disp, 0, imm, iSize ) ;
    //DBI_OFF ;
} prefix

// X variable op compile for group 1 opCodes : +/-/and/or/xor - ia32 

void
_Compile_X_Group1 ( uint8 code, uint8 toRegOrMem, uint8 mod, uint8 reg, uint8 rm, uint8 sib, int64 disp, uint8 operandSize )
{
    int64 opCode = code << 3, controlFlags = DISP_B | MODRM_B ;
    if ( operandSize > BYTE ) opCode |= 1 ;
    if ( toRegOrMem == TO_REG ) opCode |= 2 ;
    // we need to be able to set the size so we can know how big the instruction will be in eg. CompileVariable
    // otherwise it could be optimally deduced but let caller control by keeping operandSize parameter
    // some times we need cell_t where bytes would work
    //Compiler_WordStack_SCHCPUSCA ( 0, 1 ) ;
    //Compile_CalculateWrite_Instruction_X64 ( 0, opCode, mod, reg, rm, DISP_B | REX_W | MODRM_B, sib, disp, 0, 0, osize ) ;
    if ( operandSize < 8 )
    {
        int64 opCode0 ;
        if ( operandSize == 1 ) opCode |= rm ;
        else if ( operandSize == 2 )
        {
            opCode0 = 0x66 ;
            opCode |= rm ;
            //modRm = 0 ;
        }
        else if ( operandSize == 4 )
        {
            opCode |= rm ;
            //modRm = 0 ;
        }
        Compile_CalculateWrite_Instruction_X64 ( opCode0, opCode, mod, reg, rm, controlFlags, sib, disp, 0, 0, operandSize ) ;
    }
    else //if ( osize == 8 ) 
    {
        Compile_CalculateWrite_Instruction_X64 ( 0, opCode, mod, reg, rm, controlFlags, sib, disp, 0, 0, operandSize ) ;
    }
}

void
_Compile_X_Group1_Reg_To_Reg ( uint8 code, uint8 dstReg, int64 srcReg )
{
    _Compile_X_Group1 ( code, TO_REG, REG, srcReg, dstReg, 0, 0, CELL ) ;
} prefix

// group1 : ADD OR ADC SBB AND_OPCODE SUB XOR CMP : with immediate data
void
_Compile_X_Group1_Immediate ( uint8 code, uint8 mod, uint8 rm, int64 disp, uint64 imm, uint8 iSize )
{
    // 0x80 is the base opCode for this group of instructions but 0x80 is an alias for 0x82
    // we always sign extend so opCodes 0x80 and 0x82 are not being used
    // 1000 00sw 
    //<dbg>
    int64 opCode = 0x80 ;
    if ( ( ( iSize > 4 ) || ( imm >= 0x100000000 ) ) ) //&& disp )
    {
        //_DBI_ON ;
        // x64 has no insn to do a group1_op with imm int64 to mem directly so ...
        // first move to a reg then from that reg group1Op to mem location
        if ( rm != DSP ) //! disp )
        {
            Compile_MoveImm_To_Reg ( THRU_REG, imm, iSize ) ;
            //_Compile_X_Group1_Reg_To_Reg ( code, ACC, OREG ) ;
            _Compile_X_Group1_Reg_To_Reg ( code, rm, THRU_REG ) ;
        }
        else
        {
            Compile_MoveImm_To_Reg ( ACC, imm, iSize ) ;
            _Compile_X_Group1 ( code, REG, MEM, ACC, rm, 0, disp, CELL ) ;
        }
        //DBI_OFF ;
        return ;
    }
    else if ( ( iSize > BYTE ) || (abs ( imm ) >= 0x7f ) ) //( imm >= 0x100 ) )
    {
        opCode |= 1 ;
    }
    else if ( ( iSize <= BYTE ) || (abs ( imm ) < 0x100 ) ) //( imm < 0x100 ) ) 
        opCode |= 3 ;
    // we need to be able to set the size so we can know how big the instruction will be in eg. CompileVariable
    // otherwise it could be optimally deduced but let caller control by keeping operandSize parameter
    // some times we need cell_t where bytes would work
    //_Compile_InstructionX86 ( int8 opCode, int8 mod, int8 reg, int8 rm, int8 controlFlags, int8 sib, int64 disp, int8 dispSize, int64 imm, int8 immSize )
    //DBI_ON ;
    Compile_CalculateWrite_Instruction_X64 ( 0, opCode, mod, code, rm, REX_W | MODRM_B | IMM_B | DISP_B, 0, disp, 0, imm, iSize ) ;
    //DBI_OFF ;
} prefix

pwi _Compile_X_Group1_Immediate  //pause () ;

void
_Compile_Group5 ( code, mod, rm, sib, disp, size )
{
    //Compile_CalculateWrite_Instruction_X64 ( 0, 0xff, mod, code, rm, REX_B | MODRM_B | DISP_B, sib, disp, size, 0, 0 ) ;
    Compile_CalculateWrite_Instruction_X64 ( 0, 0xff, mod, code, rm, (REX_B | MODRM_B | DISP_B), sib, disp, size, 0, 0 ) ;
} prefix

#define Compile_INC( mod, rm, sib, disp ) _Compile_Group5 ( INC, mod, rm, sib, disp, 0  )
#define Compile_DEC( mod, rm, sib, disp ) _Compile_Group5 ( DEC, mod, rm, sib, disp, 0  )

void
_Compile_CallThruReg ( reg )
{
    _Compile_Group5 ( CALL, REG, reg, 0, 0, 0 ) ;
} prefix

//                               _Compile_Group1_Immediate ( code mod rm disp imm immSize ) //controlFlags )
void _Compile_SUBI_DSP ( imm ) 
{ 
    _Compile_X_Group1_Immediate ( SUB, REG, DSP, 0, imm, 1 ) ; 
} prefix

void
_Compile_Test ( mod, reg, rm, controlFlags, disp, imm )
{
    Compile_CalculateWrite_Instruction_X64 ( 0, 0xf7, mod, reg, rm, REX_B | MODRM_B | controlFlags, 0, disp, 0, imm, 0 ) ; //??
} prefix

void
_Compile_MoveReg_To_Rm ( dstRmReg, srcReg, rmRegDisp )
{
//  Compile_Move ( direction, mod, reg, rm, operandSize, sib, disp, dispSize, imm, immSize )
    Compile_Move ( MEM, 0, srcReg, dstRmReg, 8, 0, rmRegDisp, 0, 0, 0 ) ;
} prefix

void
_Compile_MoveReg_To_StackN ( stackReg, index, reg )
{
    _Compile_MoveReg_To_Rm ( stackReg, reg, index * CELL ) ;
} prefix

void
_Compile_TESTreg_Toreg ( dstReg, srcReg )
{
    //_Compile_Op_Specialreg_Toreg ( TEST_R_TO_R, dstReg, srcReg ) ;
    Compile_CalculateWrite_Instruction_X64 ( 0, 0x85, 3, srcReg, dstReg, REX_B | MODRM_B, 0, 0, 0, 0, 0 ) ;

} prefix

void _Compile_Move_DataStackN_ToReg ( reg, n ) 
{ 
//  Compile_Move ( uint8 direction, uint8 mod, uint8 reg, uint8 rm, uint8 operandSize, uint8 sib, int64 disp, uint8 dispSize, int64 imm, uint8 immSize )
    Compile_Move ( REG, MEM, reg, DSP, 8, 0, n * CELL, 0, 0, 0 ) ; 
} prefix 
pwi _Compile_Move_DataStackN_ToReg
//pause
//vb1
c_syntaxOff
infixOn
C X64
sp
C_Syntax
: _Compile_Stack_PopToReg ( reg ) 
    _Compile_Move_DataStackN_ToReg ( reg, 0 )       // 4d8b06                  mov r8, [r14]
    //"\nshould show :     4d8b06                  mov r8, [r14]" ps
    _Compile_SUBI_DSP ( CELL )                      // 4983ee08                sub r14, 0x8
    //"\nshould show :     4983ee08                sub r14, 0x8" ps
;; 
sp
'_Compile_Stack_PopToReg find wdiss //pause
sp
C X64
Combinators

sp
asm: iax
    //dbiOn
    _Compile_Stack_PopToReg ( R8D )      //4d8b06                  mov r8, [r14]       
    _Compile_CallThruReg ( R8D )             //4983ee08              sub r14, 0x8
                                                                //49ffd0                   call r8  
                                                                //c3                          ret      
;asm

' iax find wdiss sp //pause

: _Compile_Test_Imm (  mod, rm, disp, imm )
    _Compile_Test ( mod @, rm @, IMM_B, disp @, imm @ )
;;

: _Compile_IncDecreg ( op, reg )
    //_Compile_Group5 ( op @, REG, reg @, 0, 0, 0  )
    Compile_CalculateWrite_Instruction_X64 ( 0, 0xff, REG, op @, reg @, REX_B | MODRM_B, 0, 0, 0, 0, 0 ) 
;;

: _Compile_MoveTOS_To_R8D () _Compile_Move_DataStackN_ToReg ( R8D, 0 ) ;; 

: _Compile_ADDI_DSP ( imm ) _Compile_X_Group1_Immediate ( ADD, REG, DSP, 0, imm @, 1 ) ;; 

: _Compile_CMPreg_IMM ( reg, imm, isize ) _Compile_X_Group1_Immediate ( CMP, REG, reg @, 0, imm @, isize @ ) ;; 

: Compile_Stack_Push_R8D ()
    _Compile_ADDI_DSP ( CELL ) 
    _Compile_MoveReg_To_StackN ( DSP, 0, R8D ) 
;; 

Interpreter User 
: qeval
    stk iax
;
' qeval find wdiss 
sp

asm: stest
    _Compile_MoveTOS_To_R8D ( ) 
    _Compile_Move_DataStackN_ToReg ( R8D, 0 ) 
    Compile_Stack_Push_R8D ( ) 
    _Compile_SUBI_DSP ( CELL ) 
;asm
sp
' stest find wdiss //pause
//logOff
sp
"\nthis is some purposefully funky code for testing\n" ps

s stest s 
nl "x64 test" ps "ok" ' dup find xt@ iax ' ps find xt@ iax "ok" "error" assert1s sp //pause
sp
Stack
asm: ndup
    _Compile_MoveTOS_To_R8D ( )
    _Compile_SUBI_DSP ( CELL ) 
    _Compile_Move_DataStackN_ToReg ( R9D, 0 )
    "start" label 
    _Compile_TESTreg_Toreg ( R8D, R8D )
    "end" 0 EQ jcc
    _Compile_ADDI_DSP ( CELL ) 
    _Compile_MoveReg_To_StackN ( DSP, 0, R9D ) 
    _Compile_IncDecreg ( DEC, R8D ) 
    "start" goto
    "end" label // above jcc to Here
;asm

' ndup find wdiss sp 
s 7 7 ndup s 8 ndrop s
c_syntaxOn

void 
_Compile_Move ( direction mod reg rm disp ) // just for the following functions
{
    Compile_Move ( direction, mod, reg, rm, 8, 0, disp, 0, 0, 0 ) ;
} prefix

// following intel conventions in the naming : insn dst, src
// move mem to reg 
void
MOV8rm ( reg, ptr, disp ) // 8 bit disp
{
    //_Compile_Move ( direction mod reg rm disp ) 
    _Compile_Move ( REG, MEM, reg, ptr, disp ) ;
}
nprefix (3) ;
// move mem to reg : 32 bit offset
void
MOV32rm ( reg, ptr, disp ) // 32 bit disp
{
    // _Compile_Move ( direction mod reg rm disp ) 
    _Compile_Move ( REG, MEM32, reg, ptr, disp ) ;
}
nprefix (3) ;
void
MOVmr ( ptr, disp, reg ) 
{
    // _Compile_Move ( direction mod reg rm disp ) 
    _Compile_Move ( MEM, MEM, reg, ptr, disp ) ;
}
nprefix (3) ;
sp
// move reg to reg
void
MOVrr ( dstReg, srcReg )
{
    // _Compile_Move ( direction mod reg rm disp | opCode ) 
    _Compile_Move ( REG, REG, dstReg, srcReg, 0 ) ;
}
nprefix (2) ;
c_syntaxOff
sp
C_Syntax Asm 
asm: testAsm
    MOVrr RDX, RAX 
    MOVrr RAX, RBX 
    MOVrr RBX, RAX 
    MOVrr RAX, RDX 
;asm
pwi testAsm 
testAsm
sp 
cOff
//pause
2 + 7 assertStkChk // stack checking
//logOff
//stack 
    