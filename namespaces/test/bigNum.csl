5
#if 0 // debug flag
//"sp" purge 
Root
: sp stack pause ; 
C
: sp stack pause ; 
#else
: sp ; //stack pause ; 
#endif
sp
Int 
//dbgOff 
C
//infixOff
//jcc8_Off
// testing before bignum starts // - tail recursion ideas from http://c2.com/cgi/wiki?TailCallOptimization
: factorial ( n | rec ) rec 1 = { n @ 1 > } { rec @ n @ * rec store n -- } while return ( rec @ ) ;
'factorial find wdiss //pause
7 factorial dup p 5040 "factorial" _assert1 
: factorial ( REG n | REG rec ) rec 1 = { n @ 1 > } { rec @ n @ * rec store n -- } while return ( rec @ ) ;
'factorial find wdiss 
7 factorial dup p 5040 "factorial" _assert1 //pause
//verbosity 3 =
sp
c_syntaxOn
int 
factorial ( n | rec )
{
    rec = 1;
    while ( n > 1 ) rec *= (n--) ;
    //while ( n > 1 ) rec *= n-- ;
    //d: while ( n > 1 ) rec *= n - 1 ;
    return rec ;
} 
c_syntaxOff
pwi factorial
7 factorial dup p 5040 _assert sp //pause
sp
Combinators
#if 0
bnOn 
dlsym: mpfr_printf /usr/lib/x86_64-linux-gnu/libmpfr.so.6.1.0 ; void_return
: mpfrp ( value ) mpfr_printf ( "%*.*Rf", 16, 16, value ) ;
//: p mpfrp ;
//: !! ( n) factorial (n) p nl ;;
//d: !! (7) pause
7 mpfrp pause
#endif


bnOn
'x var
: sp ; //stack pause ;

: qexp { dup 1 >= } { dup -- qexp * } { drop 1 } ifElse ;
'qexp find wdiss //pause
"!" ' qexp find alias
nl "64 ! = " ps 64 ! p nl 
x 1000 ! =
nl "1000 ! = " ps x @ fprint nl 
: aexp ( -t N.N ) { dup 1 <= } { drop 1 } { dup -- aexp * } ifElse ;
'aexp find wdiss //sp
: bexp ( n ) { n @ 1 <= } { 1 } { n @ dup 1 - bexp * } ifElse return tos ; 
: bexp0 ( n ) { n @ 1 <= } { 1 } { n @ dup -- bexp0 * } ifElse return tos ; 
' bexp find wdiss ' bexp0 find wdiss 
7 bexp0 p 
//pause
7 ! p 8 ! p 8 ! p
nl 7 ! p
//pause
//"!" ' qexp find alias
//"!" ' aexp find alias
//"!" ' bexp find alias
"!" ' bexp0 find alias
7 ! p 8 ! p
: !! ! p nl ;
'!! find wdiss
7 !! 8 !! 8 !!   
sp
1000 ! p
sp
1000 ! 
x store
x @ p 
sp
//: bexpl ( n | l ) { l x @ = n @ 1 <= } { 1 l @ p } { n @ dup 1 - bexpl * } ifElse ; 
: bexpl ( n ) { n @ 1 <= } { 1 } { n @ dup 1 - bexpl * } ifElse return tos ;
'bexpl find wdiss
7 bexpl dup p 
5040 _bassert
//sp pause

nl "starting BigNum" ps nl
#if doBigNum
bnOn
#endif    
1 3 / fprint 
3 sqrt dup fprint dup * fprint //pause
sp
: tbn ( | n m ) n 0 = m 3 = n m @ += n m @ += n m @ += n @ p ; tbn " : should be 9" ps
// 9 _assert //_assert won't work here, it is not compiled with BigNum
: fibBN ( n | svn fn fn1 fn2 ) 
    { svn n @ = fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= } 
    {   
        fn1 fn2 @ = 
        fn2 fn @ = 
        fn fn1 @ fn2 @ + = 
    }
    for
    //nl svn @ fprint ":" ps fn @ fprint 
    return fn @
;
sp
nl 200 dup "\nfib" ps p "=" ps fibBN p //pause

: tfib3 ( n | m )  
    "locals fibBN : " ps 
    { m 1 = } { m @ n @ <= } { m 1 +=  } 
    { m @ dup p " : " _ps fibBN p { n @ m @ > } { "," _ps } if2 } 
    for
;
    
nl nl 92 tfib3
nl nl 92 tfib3
bnOff
//pause
#endif


Int
lcOn //(lcDbOn)
(define fibc2 ( lambda ( n ) ( ifElse ( < n 2 ) n ( + ( fibc2 ( - n 1 ) ) ( fibc2 ( - n 2 ) ) ) ) ) )
pwi fibc2 
(fibc2 20)
#if 0
(define ( fibc21  n ) ( if ( < n 2 ) n ( + ( fibc21 ( - n 1 ) ) ( fibc21 ( - n 2 ) ) ) ) ) // recursive form ; very slow
pwi fibc21 
(fibc21 20)
#endif
//pause
    
(define fibbc (lambda (n ) (ifElse (< n 2) n (+ (fibbc (- n 1)) (fibbc (- n 2))))))
// tick fibbc find wdiss
(fibbc 20)

(define x7 (7 8 9 45))
nl (list 1 2 3 `x7)
nl (list 1 2 3 `,x7 )
nl (list 1 2 3 x7 )
nl (list 1 2 3 @x7 )
nl (list 1 2 3 ,@x7 )
nl (+ 1 3 4 ,@x7) 
(+ 1 3 4 @x7) 
(+ 1 3 4 `,@x7) 
(define alist (list 1 2 3 ,@x7)) 
(alist)
//pause

#if 1 //doBigNum    
bnOn
#endif    
(define yfac45 (lambda (yy n) (if (< n 2) (1) (* n (yy yy (- n 1)))))) 
(yfac45 yfac45 10) nl
(define yfacc (lambda (yyy n1) (if (< n1 2) (1) (* n1 (yyy yyy (- n1 1)))))) 
(yfacc yfacc 10) nl
(yfacc yfacc 10) nl //pause
(define yfac (lambda (yy n) (if (< n 2) (1) (* n (yy yy (- n 1)))))) 
(yfac yfac 10) nl
(define yfacc (lambda (yyy n1) (if (< n1 2) (1) (* n1 (yyy yyy (- n1 1)))))) 
(yfacc yfacc 10) nl
(yfacc yfacc 10) nl //pause
(define yfac (lambda (yy n) (if (< n 2) 1 (* n (yy yy (- n 1)))))) // code from : http://www.newlisp.org/index.cgi?Y_Function
//tick yfac find wdiss
(yfac yfac 10) nl //pause
(define yfacc (lambda (yyy n1) (if (< n1 2) 1 (* n1 (yyy yyy (- n1 1)))))) 
// tick yfacc find wdiss
(yfacc yfacc 10) nl
(yfacc yfacc 7) nl
(define yfac (lambda (yy n) (if (< n 2) 1 (* n (yy yy (- n 1)))))) // code from : http://www.newlisp.org/index.cgi?Y_Function
//tick yfac find wdiss
(yfac yfac 10) nl 
(define yfacc (lambda (yyy n1) (if (< n1 2) 1 (* n1 (yyy yyy (- n1 1)))))) 
// tick yfacc find wdiss
(yfacc yfacc 10) nl
(yfacc yfacc 7) nl
sp
bnOff //pause

//: sp s pause ; 
(define yfac (lambda (yy n) (if (< n 2) 1 (* n (yy yy (- n 1)))))) // code from : http://www.newlisp.org/index.cgi?Y_Function
tick yfac find wdiss
(yfac yfac 10) nl //pause
(define yfacc (lambda (yyy n1) (if (< n1 2) 1 (* n1 (yyy yyy (- n1 1)))))) 
// tick yfacc find wdiss
(yfacc yfacc 10) nl
(yfacc yfacc 7) nl
(define yfac (lambda (yy n) (if (< n 2) 1 (* n (yy yy (- n 1)))))) // code from : http://www.newlisp.org/index.cgi?Y_Function
//tick yfac find wdiss
(yfac yfac 10) nl //pause
(define yfacc (lambda (yyy n1) (if (< n1 2) 1 (* n1 (yyy yyy (- n1 1)))))) 
// tick yfacc find wdiss
(yfacc yfacc 10) nl
(yfacc yfacc 7) nl
(define x "let") (define a "the") // 'let' is a special word
(define x1 'let) (define a1 the)
( Its 'a beautiful day don\'t 'let it get away )
'( Its a beautiful day don\'t let it get away )
'( Its a beautiful day don\'t @x1 it get away ) 
`( ,Its ,a ,beautiful ,day ,don\'t ,@x1 ,it ,get ,away )
`( Its ,a beautiful day don\'t ,x it get away )
`( Its 'a beautiful day don\'t ,x1 it get away )
`( Its a beautiful day don\'t ,@x it get away )
`( Its a beautiful day don\'t ,@x1 it get away )

(define ff ( lambda (n) (+ n 1)))
((/\ (x) (+ x 1)) 6 ) ((/\ (x) (+ x 1)) ((/\ (y) (+ y 2)) 4 ) )
(ff 6)
(sp)
(define h36 (lambda (a b) (a b a b a a b b)))
(h36 n09 my6 ) 
"\n should show : ( n09 my6 n09 my6 n09 n09 my6 my6 )\n" ps
(define n09 kl0 ) (define my6 op9 )
(h36 n09 my6 )
"\n should show : ( kl0 op9 kl0 op9 kl0 kl0 op9 op9 )\n" ps
//pause
sp

// macro experiments
( define id (lambda ( x y ) ( x x y y )) )
( id a b ) 
( define id1 ( lambda ( a12 b13 ) ( a12 a12 b13 b13 a12 a12 ) ) )
( id1 7 ( + 5 6 ) )
(macro swch ( lambda ( i2 b2 ) ( b2 i2 ) ) )
( swch 7 ( + 5 6 ) )
//dbgOn
( macro swch2 ( lambda ( i2 b2 ) ( (swch b2 i2) (swch b2 i2 ) ) ) )
( swch2 7 ( + 5 6 ) ) sp
//dbgOff
( macro id2 ( lambda ( i2 b2 ) ( ( swch2 b2 i2 ) ( swch2 b2 i2 ) ) ) )
( id2 7 ( + 5 6 ) )
( macro id3 ( lambda ( a12 b13 ) ( a12 a12 b13 a12 b13 b13 a12 a12 ) ) ) 
( id3 7 ( + 5 6 ) )
( macro swch3 ( lambda ( i2 b2 ) ( (swch2 b2 i2) (swch2 b2 i2 ) ) ) )
( macro id4 ( lambda ( a12 b13 ) ( a12 a12 (swch3 a12 b13 ) b13 b13 a12 a12 ) ) ) 
( id4 7 ( + 5 6 ) ) 
//pause
(define x (swch2 3 4) ) 
(swch2 3 4) 
(define x (swch 8 15) )  ( - @x) 
(define x (swch 8 19) )  ( - @x) 
(car ( 7 8 ) ) ( car 7 8 ) ( cdr ( 6 7 ) ) ( cdr 7 6 )
sp

lcOff
Root.List
nl
_((lambda ( a b) (+ a b)) 3 4 ) dupList eval printList nl printList nl //pause
nl _((lambda ( a b) (+ a b)) 3 4 ) dupList printList eval nl printList nl //pause
nl _((lambda ( a b) (+ a b)) 3 4 ) eval printList nl //pause
: bexp3 ( n ) { n @ 1 > } { n @ n @ -- bexp3 *  } { 1 } ifElse ;
'bexp3 find wdiss 7 bexp3 p sp
c_syntaxOn
int
fac5 ( REG n  | REG facc ) 
{ 
    facc = 1 ;
    while ( n > 1 ) 
    {
#if 0
        facc = facc * (n --) ;
#else
        facc *= n -- ;
#endif
    }
    return facc ;
} prefix
wdiss ( ' fac5 find ) 
sp
fac5 ( 7 ) dup p 5040 _assert sp
sp
Root
c_syntaxOn
//int cpow ( base power | out ) { for ( out = 1 ; power ; power d: -= 1 ) { out = out * base ; } return out } prefix
int cpow ( base power | out ) { for ( out = 1 ; power ; (power -= 1) ) { out *= base ; } return out ; }
'cpow find wdiss
sp
cpow (2 30 ) ; "2 ^ 30 : " ps dup p 1073741824 assert0
c_syntaxOff 
sp
: pow0 ( base power | out ) { out 1 = } { power @ 0 > } { power power @ 1 - = } { out out @ base @ * = } for return out @ ; "II.I" typeSignature
: pow ( base power | out ) { out 1 = } { power @ 0 > } { power 1 -= } { out out @ base @ * = } for return out @ ; "II.I" typeSignature
//: pow ( base power | out ) { out 1 = } { power @ 0 > } { power power @ 1 - = } { out out @ base @ * = } for return out ;
2 30 pow0 dup p 1073741824 assert0 //pause
2 30 pow dup p 1073741824 assert0 //pause
//scOff
sp
Lisp
#if doBigNum    
bnOn
(define xyfac 10)
(define yfac (lambda (yy n) (if (< n 2) 1 (* n (yy yy (- n 1)))))) // code from : http://www.newlisp.org/index.cgi?Y_Function
"\nyfac : 10 factorial = " ps (yfac yfac 10) 
bnOff 
#else
(define yfac (lambda (yy n) (if (< n 2) 1 (* n (yy yy (- n 1)))))) // code from : http://www.newlisp.org/index.cgi?Y_Function
"\nyfac : 10 factorial = " ps (yfac yfac 10) 
#endif    
Lisp 
sp
(define yfacc (lambda (yyy n1) (if (< n1 2) 1 (* n1 (yyy yyy (- n1 1)))))) 
(yfacc yfacc 10) nl
(yfacc yfacc 7) nl
Shell 
#if doBigNum    
//bnOn
#endif    
(define yfac (lambda (yy n) (if (< n 2) 1 (* n (yy yy (- n 1)))))) // code from : http://www.newlisp.org/index.cgi?Y_Function
(yfac yfac 10) 
bnOff 
Lisp //pause
(define yfacc (lambda (yyy n1) (if (< n1 2) 1 (* n1 (yyy yyy (- n1 1)))))) 
(yfacc yfacc 10) nl
(yfacc yfacc 7) nl
(define fib (lambda (n) ( ifElse (< n 2) n (+ (fib (- n 1)) (fib (- n 2))))))
(define fib2 (lambda (n) (ifElse (< n 2) n (+ (fib2 (- n 1)) (fib2 (- n 2))))))
sp
(fib 10) (fib2 10)
sp
//(ld: )
(define x "let") (define a "the") // 'let' is a special word
(define x1 'let) (define a1 the)
( Its 'a beautiful day don\'t 'let it get away )
( Its a beautiful day don\'t x it get away )
'( Its a beautiful day don\'t let it get away )
'( Its a beautiful day don\'t @x1 it get away ) 
`( ,Its ,a ,beautiful ,day ,don\'t ,@x1 ,it ,get ,away )
`( Its ,a beautiful day don\'t ,x it get away ) 
"testing unquote above line should show : ( Its a beautiful day don't x it get away )\n" ps
`( Its 'a beautiful day don\'t ,x1 it get away )
"testing unquote above line should show : ( Its a beautiful day don't x1 it get away )\n" ps 
`( Its ,@a beautiful day don\'t ,@x it get away )
`( Its a beautiful day don\'t ,@x1 it get away )
sp
lispOff  
//pause
sp  

#if 1 // REG testing
bnOff
: fib01 ( n | fn fn1 fn2 ) 
    { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= } 
    {   
        fn1 fn2 @ = 
        fn2 fn @ = 
        fn fn1 @ fn2 @ + = 
    }
    for
    // svn @ fprint ":" ps fn @ fprint 
    return fn @
;
pwi fib01
20 fib01 dup p 6765 _assert sp
: fib01 ( n | fn REG fn1 fn2 ) 
    { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= } 
    {   
        fn1 fn2 @ = 
        fn2 fn @ = 
        fn fn1 @ fn2 @ + = 
    }
    for
    // svn @ fprint ":" ps fn @ fprint 
    return fn @
;
pwi fib01
20 fib01 dup p 6765 _assert sp
: fib01 ( n | fn, REG fn1, REG fn2 ) 
    { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= } 
    {   
        fn1 fn2 @ = 
        fn2 fn @ = 
        fn fn1 @ fn2 @ + = 
    }
    for
    // svn @ fprint ":" ps fn @ fprint 
    return fn @
;
pwi fib01
20 fib01 dup p 6765 _assert sp

: fib01 ( n | REG fn REG fn1 REG fn2 ) 
    { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= } 
    {   
        fn1 fn2 @ = 
        fn2 fn @ = 
        fn fn1 @ fn2 @ + = 
    }
    for
    // svn @ fprint ":" ps fn @ fprint 
    return fn @
;
pwi fib01
20 fib01 dup p 6765 _assert sp
scOn
: fib01 ( REG n | fn fn1 REG fn2 ) 
    { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= } 
    {   
        fn1 fn2 @ = 
        fn2 fn @ = 
        fn fn1 @ fn2 @ + = 
    }
    for
    // svn @ fprint ":" ps fn @ fprint 
    return fn @
;
pwi fib01
20 fib01 dup p 6765 _assert sp
: fib01 ( REG n | fn REG fn1 REG fn2 ) 
    { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= } 
    {   
        fn1 fn2 @ = 
        fn2 fn @ = 
        fn fn1 @ fn2 @ + = 
    }
    for
    // svn @ fprint ":" ps fn @ fprint 
    return fn @
;
pwi fib01
20 fib01 dup p 6765 _assert sp
: fib01 ( REG n | fn fn1 REG fn2 ) 
    { fn 0 = fn1 0 = fn2 1 = } { n @ 0 > } { n 1 -= } 
    {   
        fn1 fn2 @ = 
        fn2 fn @ = 
        fn fn1 @ fn2 @ + = 
    }
    for
    // svn @ fprint ":" ps fn @ fprint 
    return fn @
;
pwi fib01 
20 fib01 dup p 6765 _assert sp
#endif
#endif
bigNumOff lispOff
Int
sp
2 + 7 assertStkChk // stack checking
//pause
